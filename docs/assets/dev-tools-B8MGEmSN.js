import{o as l}from"./index-CUQorlmP.js";async function d(){console.warn("🗑️ Clearing all IndexedDB data for clicking_glossolalia project...");try{const e=await l();await e.transaction("sequences","readwrite").objectStore("sequences").clear(),await e.transaction("settings","readwrite").objectStore("settings").clear(),console.log("✅ All IndexedDB data cleared successfully"),confirm("Data cleared! Reload page to reset UI?")&&window.location.reload()}catch(e){console.error("❌ Error clearing IndexedDB data:",e)}}async function u(){console.warn("🎓 Resetting tutorial state...");try{if(await window.tutorialManager.resetTutorial())console.log("✅ Tutorial state reset - reload page to see tutorial"),confirm("Tutorial reset! Reload page to see tutorial?")&&window.location.reload();else throw new Error("Failed to reset tutorial")}catch(e){console.error("❌ Error resetting tutorial:",e)}}window.clearAllData=d;window.resetTutorial=u;console.log("🔧 Dev helpers available:");console.log("  - clearAllData(): Clear all sequences and settings");console.log("  - resetTutorial(): Reset tutorial state to test first-time experience");async function g(e=50){console.warn(`🎲 Generating ${e} random sequences for testing...`);try{const t=await l();let o=0;for(let r=0;r<e;r++){const i=Math.floor(Math.random()*8)+1,s=[],c=new Set;for(let a=0;a<i;a++){let n;do n=Math.floor(Math.random()*24);while(c.has(n));c.add(n),s.push(n)}s.sort((a,n)=>a-n),await t.transaction("sequences","readwrite").objectStore("sequences").add(s),o++,typeof addSequenceThumbnail=="function"&&addSequenceThumbnail(s),r%10===0&&await new Promise(a=>setTimeout(a,10))}console.log(`✅ Generated ${o} random sequences successfully`),console.log("📊 Sequences range from 1-8 circles each, randomly distributed across all 24 positions")}catch(t){console.error("❌ Error generating random sequences:",t)}}async function w(){console.warn("🎨 Generating test patterns for design testing...");const e=[[0],[3],[6],[9],[12],[15],[18],[21],[0,1,2],[3,4,5],[6,7,8],[9,10,11],[0,3,6,9,12,15,18,21],[1,4,7,10,13,16,19,22],[2,5,8,11,14,17,20,23],[0,6,12,18],[3,9,15,21],[0,1,3,4,6,7,9,10],[0,2,5,8,11,14,17,20],[1,4,7,10,13,16,19,22]];try{const t=await l();for(const o of e)await t.transaction("sequences","readwrite").objectStore("sequences").add(o),typeof addSequenceThumbnail=="function"&&addSequenceThumbnail(o);console.log(`✅ Generated ${e.length} test patterns`)}catch(t){console.error("❌ Error generating test patterns:",t)}}window.generateRandomSequences=g;window.generateTestPatterns=w;console.log("🔧 Dev helpers available:");console.log("  - generateRandomSequences(50) - Generate random sequences");console.log("  - generateTestPatterns() - Generate specific test patterns");console.log("  - clearAllData() - Clear all data and reload");console.log("  - resetTutorial() - Reset tutorial state");export{d as clearAllData,g as generateRandomSequences,w as generateTestPatterns,u as resetTutorial};
